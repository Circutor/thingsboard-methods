// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	core "github.com/circutor/thingsboard-methods/pkg/core"

	mock "github.com/stretchr/testify/mock"
)

// ThingsBoardDeviceControllerMock is an autogenerated mock type for the ThingsBoardDeviceController type
type ThingsBoardDeviceControllerMock struct {
	mock.Mock
}

// ClaimDevice provides a mock function with given fields: deviceName, token, claimDeviceBody
func (_m *ThingsBoardDeviceControllerMock) ClaimDevice(deviceName string, token string, claimDeviceBody core.ClaimDeviceBody) (int, map[string]interface{}, error) {
	ret := _m.Called(deviceName, token, claimDeviceBody)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, core.ClaimDeviceBody) int); ok {
		r0 = rf(deviceName, token, claimDeviceBody)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string, core.ClaimDeviceBody) map[string]interface{}); ok {
		r1 = rf(deviceName, token, claimDeviceBody)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, core.ClaimDeviceBody) error); ok {
		r2 = rf(deviceName, token, claimDeviceBody)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CreateDevice provides a mock function with given fields: createDeviceBody, token
func (_m *ThingsBoardDeviceControllerMock) CreateDevice(createDeviceBody core.CreateDeviceBody, token string) (int, map[string]interface{}, error) {
	ret := _m.Called(createDeviceBody, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(core.CreateDeviceBody, string) int); ok {
		r0 = rf(createDeviceBody, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(core.CreateDeviceBody, string) map[string]interface{}); ok {
		r1 = rf(createDeviceBody, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(core.CreateDeviceBody, string) error); ok {
		r2 = rf(createDeviceBody, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteDevice provides a mock function with given fields: deviceID, token
func (_m *ThingsBoardDeviceControllerMock) DeleteDevice(deviceID string, token string) (int, map[string]interface{}, error) {
	ret := _m.Called(deviceID, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(deviceID, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string) map[string]interface{}); ok {
		r1 = rf(deviceID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(deviceID, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCustomerDevices provides a mock function with given fields: customerID, token, query
func (_m *ThingsBoardDeviceControllerMock) GetCustomerDevices(customerID string, token string, query map[string]interface{}) (int, map[string]interface{}, error) {
	ret := _m.Called(customerID, token, query)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) int); ok {
		r0 = rf(customerID, token, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string, map[string]interface{}) map[string]interface{}); ok {
		r1 = rf(customerID, token, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, map[string]interface{}) error); ok {
		r2 = rf(customerID, token, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDeviceByID provides a mock function with given fields: deviceIds, token
func (_m *ThingsBoardDeviceControllerMock) GetDeviceByID(deviceIds string, token string) (int, map[string]interface{}, error) {
	ret := _m.Called(deviceIds, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(deviceIds, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string) map[string]interface{}); ok {
		r1 = rf(deviceIds, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(deviceIds, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDeviceCredentialsByDeviceID provides a mock function with given fields: deviceID, token
func (_m *ThingsBoardDeviceControllerMock) GetDeviceCredentialsByDeviceID(deviceID string, token string) (int, map[string]interface{}, error) {
	ret := _m.Called(deviceID, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(deviceID, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string) map[string]interface{}); ok {
		r1 = rf(deviceID, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(deviceID, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDevicesByEntityGroupID provides a mock function with given fields: entityGroupID, token, query
func (_m *ThingsBoardDeviceControllerMock) GetDevicesByEntityGroupID(entityGroupID string, token string, query map[string]interface{}) (int, map[string]interface{}, error) {
	ret := _m.Called(entityGroupID, token, query)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string, map[string]interface{}) int); ok {
		r0 = rf(entityGroupID, token, query)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string, map[string]interface{}) map[string]interface{}); ok {
		r1 = rf(entityGroupID, token, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, map[string]interface{}) error); ok {
		r2 = rf(entityGroupID, token, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTenantDevice provides a mock function with given fields: deviceName, token
func (_m *ThingsBoardDeviceControllerMock) GetTenantDevice(deviceName string, token string) (int, map[string]interface{}, error) {
	ret := _m.Called(deviceName, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(deviceName, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string) map[string]interface{}); ok {
		r1 = rf(deviceName, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(deviceName, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReClaimDevice provides a mock function with given fields: deviceName, token
func (_m *ThingsBoardDeviceControllerMock) ReClaimDevice(deviceName string, token string) (int, map[string]interface{}, error) {
	ret := _m.Called(deviceName, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(deviceName, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 map[string]interface{}
	if rf, ok := ret.Get(1).(func(string, string) map[string]interface{}); ok {
		r1 = rf(deviceName, token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(deviceName, token)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
